#!/bin/bash

#
# Arch GNU/Linux installer
# 
# Copyright (C) Patryk Jaworski <regalis@regalis.com.pl>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

#
# Core::globals
#

TARGET="" # target directory
ARCHITECTURE="" # new system architecture
HOOKS="" # hooks list
PACKAGES="" # target packages

#
# Core::decorations
#

BOLD=$(tput bold)
CSTD=$(tput sgr0)
CRED=$(tput setf 4)
CGRN=$(tput setf 2)
CYLW=$(tput setf 6)

#
# Utils::output
#

MSG_CONTEXT=""

info() {
	echo "[I]${MSG_CONTEXT} $@"
}

warn() {
	echo "${CYLW}[W]${CSTD}${MSG_CONTEXT} $@"
}

err() {
	echo "${CRED}[E]${CSTD}${MSG_CONTEXT} $@" 1>&2
}

log() {
	echo $@ > log
}

ask() {
	echo -n "$1 (y/N): "
	read ANSWER
	echo
	if [[ "$ANSWER" =~ ^[Yy]$ ]]; then
		return 0;
	else
		return 1;
	fi;
}

set_context() {
	MSG_CONTEXT="$1"
}

clear_context() {
	MSG_CONTEXT=""
}


#
# Utils::jobs
#

JOB_COMMENT="";
JOB_STATUS="";
JOBS=99;
JOB=0;

new_job() {
	[[ "$1" = "" ]] && $1 = 0;
	JOBS=$1;
	JOB=0;
}

job_done() {
	echo -ne "\r\033[K${CGRN}[I]${CSTD} $JOB_COMMENT - $JOB_STATUS" && echo;
	[[ ! $JOBS -eq 0 ]] && let JOB++;
}

job_fail() {
	echo -ne "\r\033[K${CRED}[I]${CSTD} $JOB_COMMENT (${CRED}${1}${CSTD})" && echo;
	[[ ! $JOBS -eq 0 ]] && let JOB++;
}

job_print() {
	JOB_COMMENT=$1
	JOB_STATUS="";
	echo -ne "\r\033[K[I] $1";
	[[ ! $JOBS -eq 0 ]] && echo -n "[$JOB/$JOBS]"
	sleep 0.2s;
	[[ ! $JOBS -eq 0 && $JOB -eq $JOBS ]] && echo;
}

job_status() {
	JOB_STATUS=$1
	echo -ne "\r\033[K[I] $JOB_COMMENT - $1";
	sleep 0.2s;
}

#
# Utils::hooks
#

run_hooks() {
	new_job 0
	if [[ $1 != "install" ]]; then
		for HOOK in $HOOKS; do
			NAME=$(echo hook_${HOOK}_$1)
			type $NAME > /dev/null 2>&1
			if [[ $? -eq 0 ]]; then
				set_context "[$1]"
				info "Running hook $HOOK"
				set_context "  [$HOOK] "
				$NAME;
				clear_context
			fi
		done
	else
		NAME=$(echo hook_${INSTALL_HOOK}_$1)
		type $NAME > /dev/null 2>&1
		if [[ $? -eq 0 ]]; then
			set_context "[$1]"
			info "Running install hook ${INSTALL_HOOK}"
			set_context "  [${INSTALL_HOOK}] "
			$NAME;
			clear_context
		fi
			
	fi;
}

#
# Utils::packages
#

add_packages() {
	PACKAGES="$PACKAGES $@"
}

set_install_hook() {
	INSTALL_HOOK=$1;
}

#
# Utils::mount
#

MOUNTPOINTS=();

#
# $1 - device
# $2 - dir
# $3 - type
# $4..n options passed directly to mount
#
do_mount() {
	info "Trying to mount $3 on $2"
	local DEVICE=$1
	local DIR=$2
	local TYPE=$3
	shift 3
	mount -t ${TYPE} ${DEVICE} ${DIR} $@ && MOUNTPOINTS=("${DIR}" "${MOUNTPOINTS[@]}")
}


#
# Core::pacman
#

# $1..n packages
install_packages() {
	pacman -r ${TARGET} --noconfirm --quiet --noprogressbar --needed -Sy $@
}

# $1..n packages
remove_packages() {
	pacman -r ${TARGET} --noconfirm --quiet --noprogressbar -R $@
}


#
# Core::chroot
#

# $1 - program
# $2..n program args
#
chroot_exec() {
	info "[chroot] Executing command: " $@
	chroot ${TARGET} $@
}

#
# Hooks::core
#
# Common hooks
# 
# hook_NAME_preinstall - will be executed before install hook
# hook_NAME_install - will be execeted as a main install routine
# hook_NAME_postinstall - will be executed after install hook
# hook_NAME_desc - will be executed when help requested
#

hook_detect_architecture_preinstall() {
	info "detecting architecture";
	ARCHITECTURE=i686
	grep '^flags.* lm ' /proc/cpuinfo > /dev/null 2>&1 && ARCHITECTURE=x86_64
}

hook_base_preinstall() {
	info "adding base packages"
	add_packages "base vim net-tools";
}

hook_gnome_preinstall() {
	info "adding gnome packages"
	add_packages "gnome gnome-extra gnome-tweak-tool"
}

hook_xfce_preinstall() {
	info "adding xfce packages"
	add_packages "xfce4 xfce4-goodies evince"
}

hook_pacman_preinstall() {
	info "setting install hook"
	set_install_hook pacman
}

hook_pacman_install() {
	info "preparing target directory"
	mkdir -p $TARGET/var/lib/pacman > /dev/null 2>&1 || err "Unable to create directory in ${TARGET}"
	info "installing packages"
	install_packages ${PACKAGES}
	if [[ $? -eq 0 ]]; then
		info "all packages installed"
	else
		err "pacman exited with $?"
	fi
}

prepare_chroot_cleanup() {
	set_context "[prepare_chroot]"
	umount ${MOUNTPOINTS[@]} && info "chroot cleanup: OK"
}

hook_prepare_chroot_postinstall() {
	trap "prepare_chroot_cleanup" EXIT
	do_mount /dev "${TARGET}/dev" devtmpfs -o bind &&
	do_mount proc "${TARGET}/proc" proc -o nosuid,nodev,noexec &&
	do_mount sys "${TARGET}/sys" sysfs -o nosuid,nodev,noexec &&
	do_mount devpts "${TARGET}/dev/pts" devpts -o gid=5,mode=620  &&
	do_mount /etc/resolv.conf "${TARGET}/etc/resolv.conf" resolv -o bind
}

hook_prepare_chroot_cleanup_postinstall() {
	umount ${MOUNTPOINTS[@]} && info "chroot cleanup: OK"
}

hook_build_mkcinitcpio_postinstall() {
	chroot "${TARGET}" mkinitcpio -p linux
}

hook_create_build_user_postinstall() {
	grep -q build ${TARGET}/etc/passwd || {
		info "Creating build user"
		chroot_exec useradd -m build
	}
}

hook_delete_build_user_postinstall() {
	grep -q build ${TARGET}/etc/passwd && {
		info "Cleaning build environment"
		chroot_exec userdel -r build
	}
}

#
# Diskless environment
#

DISKLESS_INITRAM_MODULES="forcedeth e1000"

hook_mkinitcpio_squashfs_preinstall() {
	add_packages binutils make wget pv fakeroot git findutils sudo mkinitcpio-nfs-utils
}

# mkinitcpio-squashfs hook
# 
# * download and build mkinitramfs-squashfs package source from Github.com/Regalis
# * install mkinitramfs-squashfs package
# 
hook_mkinitcpio_squashfs_postinstall() {
	pacman -r ${TARGET} -Qq mkinitcpio-squashfs-git > /dev/null 2>&1 || { 
	cat <<EOF > ${TARGET}/home/build/build.sh
#/bin/bash
cd ~
wget "https://raw.githubusercontent.com/Regalis/mkinitramfs-squashfs/develop/dist/archlinux/PKGBUILD"
makepkg -f
find -name *.pkg.tar.xz -execdir mv '{}' mkinitcpio-squashfs \;
EOF
	info "Building mkinitcpio-squashfs package"
	chroot_exec sudo -u build -- bash /home/build/build.sh
	info "Installing package mkinitcpio-squashfs-git"
	pacman -r ${TARGET} -U ${TARGET}/home/build/mkinitcpio-squashfs --noconfirm --noprogressbar ||
		err "Unable to install package"
	}
}

#
# Diskless postinstall hook
# * prepare mkinitcpio.conf:
#   * add initram modules (see DISKLESS_INITRAM_MODULES variable)
#   * add squashfs and net hooks
#   * remove fsck hook
# 
hook_diskless_postinstall() {
# TODO: learn sed
# TODO: fix sed rubbish

	grep -e "^MODULES=\".*${DISKLESS_INITRAM_MODULES}.*\"" ${TARGET}/etc/mkinitcpio.conf ||
		{ info "Adding additional modules to mkinitcpio.conf"; sed -i.bak -r -e "s/^MODULES=\"(.*)\"/MODULES=\"\1 ${DISKLESS_INITRAM_MODULES}\"/" ${TARGET}/etc/mkinitcpio.conf; }
	
	grep -e '^HOOKS=".*net block squashfs.*"' ${TARGET}/etc/mkinitcpio.conf ||
		{ info "Adding net, squashfs hooks to mkinitcpio.conf"; sed -i.bak -r -e 's/^(HOOKS=")(.*)filesystems(.*)"/\1\2net block squashfs filesystems\3"/' -e 's/^(HOOKS=")(.*) fsck(.*)"/\1\2\3"/' ${TARGET}/etc/mkinitcpio.conf; }

}

hook_mkinitcpio_disable_autodetect_postinstall() {
	grep -e '^HOOKS=".*autodetect*"' ${TARGET}/etc/mkinitcpio.conf ||
		{ info "Disabling autodetect in /etc/mkinitcpio.conf"; sed -i.bak -r -e 's/^(HOOKS=")(.*) autodetect(.*)"/\1\2\3"/' ${TARGET}/etc/mkinitcpio.conf; } 
}

hook_squashfs_postinstall() {
	info "Creating exclude file..."
	EF="$(mktemp)"

	echo "./boot" > $EF
	echo "./usr/share/gtk-doc" >> $EF
	echo "./usr/share/man" >> $EF
	echo "./usr/share/doc" >> $EF
	echo "./lib/firmware" >> $EF
	echo "./usr/include" >> $EF
	echo "./var/lib/pacman" >> $EF
	echo "./usr/lib/pacman" >> $EF
	echo "./usr/include" >> $EF

	info "Creating system image..."
	( cd ${TARGET}; mksquashfs . /tmp/root.sfs -ef ${EF} )
	info "System image ready..."
	rm ${EF}
}

#
# Schemes helpers
#

REGISTERED_SCHEMES=();

# $1..$n schemes
register_scheme() {
	for X in $@; do
		REGISTERED_SCHEMES=("${X}" "${REGISTERED_SCHEMES[@]}");
	done
}

#
# Default schemes
#

SCHEME_base="detect_architecture base pacman prepare_chroot build_mkcinitcpio"
SCHEME_diskless="${SCHEME_base/prepare_chroot/prepare_chroot diskless mkinitcpio_disable_autodetect}"

register_scheme base diskless

usage() {
	echo "Usage: $0 -t TARGET_DIRECTORY [-a ARCHITECTURE] -s HOOKS_SCHEME"
	echo "Options: "
	echo "   -t     target directory"
	echo "   -a     architecture"
	echo "   -s     hooks scheme"
	echo "Available schemes:"
	for S in ${REGISTERED_SCHEMES[@]}; do
		echo " ├─ $S"
		[[ ${REGISTERED_SCHEMES[${#REGISTERED_SCHEMES[@]} - 1]} = $S ]] && echo -n " └─" || echo -n " ├─";
		SCHEME_HOOKS=$(echo SCHEME_${S})
		SCHEME_HOOKS=$(echo ${!SCHEME_HOOKS})
		echo "── $SCHEME_HOOKS"
	done
}

parse_options() {
	while getopts "t:a:s:h" opt; do
		case $opt in
			"t")
				TARGET=$OPTARG
			;;
			"a")
				ARCHITECTURE=$OPTARG
			;;
			"s")
				HOOKS=$(echo SCHEME_${OPTARG})
				HOOKS=${!HOOKS}
			;;
			"h")
				usage
				exit 0
			;;
			":")
				err "Option -$OPTARG requires an argument..."
				exit -1
			;;
			"?")
				err "Unknown option -$OPTARG..."
				exit -2
			;;
		esac;
	done;
}

validate_options() {
	if [[ -z "$TARGET" ]]; then
		err "You must specity target directory..."
		usage
		exit 1
	else
		if [[ ! -w "$TARGET" ]]; then
			err "Something is wrong with target directory..."
		usage
			exit 1
		fi;
	fi;
	if [[ -z "$HOOKS" ]]; then
		err "No hooks specified..."
		usage
		exit 3
	fi;
}

main() {
	parse_options $@
	validate_options

	run_hooks "preinstall"

	if [[ -z "$ARCHITECTURE" ]] ; then
		err "Target architecture not specified"
		exit 2;
	else
		if [[ "$ARCHITECTURE" != "x86_64" && "$ARCHITECTURE" != "i686" ]]; then
			err "Architecture must be one of x86_64, i368...";
			exit 2;
		fi;
	fi;

	if [[ -z "$INSTALL_HOOK" ]]; then
		err "Install hook not specified. Exiting"
		exit 4;
	fi;

	info "Configuration:"
	info "    Hooks          : ${HOOKS}"
	info "    Directory      : ${TARGET}"
	info "    Architecture   : ${ARCHITECTURE}"
	info "    Packages       : ${PACKAGES}"

	ask "Continue?" || { warn "Aborting..."; exit 1; }
	
	run_hooks "install"
	run_hooks "postinstall"
	echo;
}

[[ $0 != ${BASH_SOURCE} ]] || main $@
# vim: ft=sh :
